@page "/accountsreceivable"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Radzen
@using Newtonsoft.Json;

@inject InvoiceService InvoiceService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject JobDescriptionService JobDescriptionService
@inject CompanyService CompanyService
@inject IJSRuntime JS

<h3 class="text-center my-4"><RadzenIcon Icon="account_balance" />Accounts Receivable</h3>

<div class="container">
    <!-- Company Name Filter Dropdown -->
    <div class="row mb-3">
        <div class="col-12">
            <RadzenDropDown TValue="string" @bind-Value="selectedCompanyName" Data="companyNames" Placeholder="Select Company"
                            Change="OnCompanyNameChanged" />
        </div>
    </div>

    @if (combinedInvoices != null && combinedInvoices.Any())
    {
        <div class="row">
            <div class="col-12">
                <RadzenDataGrid TItem="InvoiceViewModel" Data="@combinedInvoices" AllowPaging="true" PageSize="10" AllowSorting="true" AllowColumnReorder="true" ColumnWidth="140px" AllowColumnResize="true" ColumnReordered="@OnColumnReordered" @ref="filteredInvoicesGrid">
                    <Columns>
                        <!-- Separator Row -->
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Title=" " Width="0px">
                            <Template Context="item">
                                @if (item.IsSeparator && filteredInvoices.Count > 0 && particialInvoices.Count > 0)
                                {
                                    <div class="separator-row">
                                        @item.SeparatorText
                                    </div>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <!-- Invoice Number -->
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.InvoiceNumber" Title="Invoice Number">
                            <Template Context="item">
                                @if (!item.IsSeparator)
                                {
                                    @((item.Invoice.Id + 10000).ToString())
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.StartDate" Title="WorkDate" FormatString="{0:MM/dd/yyyy}" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.CompanyName" Title="Company Name" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.AmountCost" Title="Amount Cost" />

                        <!-- Checkbox Column -->
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Title="Select" Sortable="false" Filterable="false">
                            <Template Context="item">
                                @if (!item.IsSeparator)
                                {
                                    <input type="checkbox" @onchange="e => OnCheckboxChanged(item.Invoice, e.Value)" />
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <!-- Editable Columns (Amount Paid, Date Paid, Check Number) -->
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.AmountPaid" Title="Amount Paid">
                            <Template Context="item">
                                @if (!item.IsSeparator)
                                {
                                    @if (selectedInvoices.Contains(item.Invoice))
                                    {
                                        <RadzenNumeric @bind-Value="item.Invoice.AmountPaid" />
                                    }
                                    else
                                    {
                                        @item.Invoice.AmountPaid
                                    }
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.DatePaid" Title="Date Paid">
                            <Template Context="item">
                                @if (!item.IsSeparator)
                                {
                                    @if (selectedInvoices.Contains(item.Invoice))
                                    {
                                        <RadzenDatePicker @bind-Value="item.Invoice.DatePaid" />
                                    }
                                    else
                                    {
                                        @item.Invoice.DatePaid.ToString("MM/dd/yyyy")
                                    }
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.CheckNumber" Title="Check Number">
                            <Template Context="item">
                                @if (!item.IsSeparator)
                                {
                                    @if (selectedInvoices.Contains(item.Invoice))
                                    {
                                        <RadzenTextBox @bind-Value="item.Invoice.CheckNumber" />
                                    }
                                    else
                                    {
                                        @item.Invoice.CheckNumber
                                    }
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.SpecialNote" Title="Special Note" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.PropertyAddress" Title="Property Address" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.Unit" Title="Unit" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.GateCode" Title="Gate Code" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.LockBox" Title="Lock Box" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.SizeBedroom" Title="Bedrooms" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.SizeBathroom" Title="Bathrooms" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.WorkOrder" Title="Work Order" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.JobDescriptionChoice" Title="Job Description" />
                        <RadzenDataGridColumn TItem="InvoiceViewModel" Property="Invoice.ContractorName" Title="Contractor Name" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    }
    <RadzenRow class="mt-3">
        <RadzenColumn class="mb-3">
            <RadzenButton Text="Done" Click="Done" Icon="description" Style="width: 100%;" ButtonStyle="ButtonStyle.Primary" />
        </RadzenColumn>
        <RadzenColumn class="mb-3">
            <RadzenButton Text="Download to PDF" Click="DownloadPDF" Icon="description" Style="width: 100%;" ButtonStyle="ButtonStyle.Info" />
        </RadzenColumn>
        <RadzenColumn class="mb-3">
            <RadzenButton Text="Download to Excel" Click="DownloadExcel" Icon="table_view" Style="width: 100%;" ButtonStyle="ButtonStyle.Success" />
        </RadzenColumn>
    </RadzenRow>
</div>
@foreach(Invoice invoice in selectedInvoices)
{
    <div id="pdf-content-@invoice.Id" style="display: none;">
        <h3 class="text-center my-4">INVOICE</h3>

        <div class="container my-5">
            <!-- Header Section -->
            <div class="row">
                <div class="col-md-6">
                    <p><strong>This Company (DKSK Maintenance)</strong></p>
                    <p>This Company address</p>
                    <p>This Company phone</p>
                    <p>This Company e-mail</p>
                    <p>License Number:</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p><strong>Invoice Number:</strong>@(invoice.Id + 10000)</p>
                    <p><strong>Work Date:</strong> @(invoice.AnticipatedEndDate.ToString("MM/dd/yyyy"))</p>
                    <p><strong>Due Date:</strong> @(invoice.InvoiceCreatedDate.HasValue ? invoice.InvoiceCreatedDate.Value.ToString("MM/dd/yyyy") : "N/A")</p>
                </div>
            </div>

            <!-- Bill To and Work To Section -->
            @company = GetCompanyInfo(invoice)
            <div class="row mt-4">
                <div class="col-md-6">
                    <h5><strong>Bill To:</strong></h5>
                    <p>Company Name: @invoice.CompanyName</p>
                    <p>Company Address: @company.Address</p>
                    <p>Company Phone: @company.Phone</p>
                    <p>Company Email: @company.Email</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <h5><strong>Work To:</strong></h5>
                    <p>Supervisor Name: </p>
                    <p>Property Name: </p>
                    <p>Property Address: @invoice.PropertyAddress</p>
                    <p>Property City, Zip: </p>
                </div>
            </div>

            <!-- Description Table -->
            <div class="row mt-4">
                <div class="col-12">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">Description</th>
                                <th scope="col">Price</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (JobDiscription jd in GetJDList(invoice))
                            {
                                <tr>
                                    <td>@jd.description</td>
                                    <td>@jd.price</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
 

            <!-- Total Section -->
            <div class="row mt-2">
                <div class="col-md-6">
                    <p><strong>Work Order Number:</strong> @invoice.WorkOrder</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p><strong>Total Due:</strong> @invoice.AmountCost</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Invoice> selectedInvoices = new List<Invoice>();
    private List<Invoice> invoices = new List<Invoice>();
    private List<Invoice> filteredInvoices = new List<Invoice>();
    private List<Invoice> particialInvoices = new List<Invoice>();
    private List<InvoiceViewModel> combinedInvoices = new List<InvoiceViewModel>();
    private List<JobDiscription> jobs = new List<JobDiscription>();
    private List<Companny> compannies = new List<Companny>();
    private Companny company = new Companny {Name = "" };

    private string selectedCompanyName = "View All";
    private List<string> companyNames = new List<string>();

    List<string> columnOrder = new List<string>();
    private RadzenDataGrid<InvoiceViewModel> filteredInvoicesGrid;
    public class InvoiceViewModel
    {
        public Invoice Invoice { get; set; } // Holds the actual invoice data
        public bool IsSeparator { get; set; } // Indicates if this is a separator row
        public string SeparatorText { get; set; } // Text to display in the separator row
    }
    protected Companny GetCompanyInfo(Invoice invoice)
    {
        foreach(Companny companny in compannies)
        {
            if (invoice.CompanyName == companny.Name) return companny;
        }
        return new Companny { Name = invoice.CompanyName };
    }
    protected List<JobDiscription> GetJDList(Invoice invoice)
    {
        List<JobDiscription> jobDescriptions = new List<JobDiscription>();
        if (!string.IsNullOrEmpty(invoice.JobDescriptionChoice))
        {
            try
            {
                List<string> jobDescriptionsStrings = JsonConvert.DeserializeObject<List<string>>(invoice.JobDescriptionChoice);
                foreach (string jds in jobDescriptionsStrings)
                {
                    bool flag = true;
                    foreach (JobDiscription job in jobs)
                    {
                        if (job.description == jds)
                        {
                            jobDescriptions.Add(job);
                            flag = false;
                            break;
                        }
                    }
                    if(flag)
                    {
                        jobDescriptions.Add(new JobDiscription { description = jds, price = 0 });
                    }
                }
            }
            catch
            {
                // Handle JSON deserialization errors
            }
        }
        return jobDescriptions;
    }
    private void OnColumnReordered(Radzen.DataGridColumnReorderedEventArgs<InvoiceViewModel> args)
    {
        var currentColumnOrder = filteredInvoicesGrid.ColumnsCollection.Select(c => c.Title).ToList();
        SaveColumnOrderToLocalStorage(currentColumnOrder);
    }


    private async void SaveColumnOrderToLocalStorage(List<string> columnOrder)
    {
        var columnOrderString = string.Join(",", columnOrder);
        await JS.InvokeVoidAsync("localStorage.setItem", "AccountReceivablecolumnOrder", columnOrderString);
    }

    private void ReorderColumns(List<string> columnOrder)
    {
        if (filteredInvoicesGrid == null)
        {
            Console.WriteLine("filteredInvoicesGrid is not initialized.");
            return;
        }

        // Reorder the columns based on saved columnOrder
        var reorderedColumns = filteredInvoicesGrid.ColumnsCollection
            .OrderBy(c => columnOrder.IndexOf(c.Title))
            .ToList();

        filteredInvoicesGrid.ColumnsCollection.Clear();
        foreach (var column in reorderedColumns)
        {
            filteredInvoicesGrid.ColumnsCollection.Add(column);
        }
        StateHasChanged();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // After the first render, attempt to reorder columns if there is a saved order
            var savedColumnOrder = await JS.InvokeAsync<string>("localStorage.getItem", "AccountReceivablecolumnOrder");
            if (!string.IsNullOrEmpty(savedColumnOrder))
            {
                var columnOrderList = savedColumnOrder.Split(',').ToList();
                if (filteredInvoicesGrid != null)
                {
                    ReorderColumns(columnOrderList);
                }
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            invoices = await InvoiceService.GetInvoicesReceivable();
            await LoadJobDataAsync();
            await LoadComapnyDataAsync();
            // Extract unique company names from invoices and add "View All"
            companyNames = invoices.Select(i => i.CompanyName).Distinct().ToList();
            companyNames.Insert(0, "View All");

            // Initialize filtered invoices to show all by default
            filteredInvoices = invoices.Where(i => i.AmountPaid <= 0).ToList();
            particialInvoices = invoices.Where(i => i.AmountPaid > 0).ToList();
            // Combine both lists with a separator row in between
            combinedInvoices = filteredInvoices
                .Select(i => new InvoiceViewModel { Invoice = i, IsSeparator = false })
                .ToList();

            // Add the separator row
            combinedInvoices.Add(new InvoiceViewModel { IsSeparator = true, SeparatorText = "Partially Paid Invoices" });

            combinedInvoices.AddRange(particialInvoices
                .Select(i => new InvoiceViewModel { Invoice = i, IsSeparator = false }));

            StateHasChanged();

        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            // Handle the exception as needed
        }
    }
    private async Task LoadJobDataAsync()
    {
        jobs = await JobDescriptionService.GetAllJobsAsync();

    }
    private async Task LoadComapnyDataAsync()
    {
        compannies = await CompanyService.GetAllCompaniesAsync();
    }
    private void OnCompanyNameChanged(object value)
    {
        selectedCompanyName = value.ToString();

        OnFilter();
    }
    private void OnFilter()
    {
        // Filter invoices based on selected company name
        if (selectedCompanyName == "View All")
        {
            filteredInvoices = invoices.Where(i => i.AmountPaid <= 0).ToList();
            particialInvoices = invoices.Where(i => i.AmountPaid > 0).ToList();
        }
        else
        {
            filteredInvoices = invoices.Where(i => (i.CompanyName == selectedCompanyName && i.AmountPaid <= 0)).ToList();
            particialInvoices = invoices.Where(i => (i.CompanyName == selectedCompanyName && i.AmountPaid > 0)).ToList();

        }
        // Combine both lists with a separator row in between
        combinedInvoices = filteredInvoices
            .Select(i => new InvoiceViewModel { Invoice = i, IsSeparator = false })
            .ToList();

        // Add the separator row
        combinedInvoices.Add(new InvoiceViewModel { IsSeparator = true, SeparatorText = "Partially Paid Invoices" });

        combinedInvoices.AddRange(particialInvoices
            .Select(i => new InvoiceViewModel { Invoice = i, IsSeparator = false }));
        StateHasChanged();
    }

    private void OnCheckboxChanged(Invoice invoice, object isChecked)
    {
        bool checkedStatus = (bool)isChecked;
        if (checkedStatus)
        {
            if (!selectedInvoices.Contains(invoice))
            {
                selectedInvoices.Add(invoice);
            }
        }
        else
        {
            selectedInvoices.Remove(invoice);
        }
    }

    private async Task Done()
    {
        try
        {
            for (int i = 0; i < selectedInvoices.Count; i++){
                if (selectedInvoices[i].AmountCost < selectedInvoices[i].AmountPaid)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "The paid amount can not be greater than amount due!",
                            Duration = 3000
                        });
                    return;
                }
                else if (selectedInvoices[i].AmountCost == selectedInvoices[i].AmountPaid) selectedInvoices[i].Status = 2;
            }
            var result = await DialogService.Confirm("Are you sure you want to Submit?", "Confirmation");

            if (result.HasValue && result.Value)
            {
                await InvoiceService.UpdateInvoicesAsync(selectedInvoices);

                // Remove processed invoices from the list
                invoices = await InvoiceService.GetInvoicesReceivable();
                OnFilter();

                // Clear the selection
                selectedInvoices.Clear();
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Invoices successfully submitted!",
                    Duration = 3000
                });


            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to updating invoice: {ex.Message}",
                Duration = 3000
            });
        }
    }
    private async Task DownloadExcel()
    {
        // Filter only necessary data from the invoices
        var invoiceData = selectedInvoices.Select(i => new
        {
            i.Id,
            i.TodaysDate,
            i.StartDate,
            i.AnticipatedEndDate,
            i.CompanyName,
            i.AmountCost,
            i.AmountPaid,
            i.CheckNumber,
            i.SpecialNote,
            i.PropertyAddress,
            i.Unit,
            i.GateCode,
            i.LockBox,
            i.SizeBedroom,
            i.SizeBathroom,
            i.WorkOrder,
            i.JobDescriptionChoice
        }).ToList();

        // Call JS function to download Excel
        await JS.InvokeVoidAsync("saveAsExcel", invoiceData);
    }

    private async Task DownloadPDF()
    {


        // Call JS function to download PDF
        foreach (Invoice invoice in selectedInvoices)
        {

            await JS.InvokeVoidAsync("saveAsPDFByTemplate", "pdf-content-" + invoice.Id, "documents");
        }
    }
}
