@page "/accountsreceivable"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Radzen

@inject InvoiceService InvoiceService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Accounts Receivable</PageTitle>

<div class="row">
    <div class="col-12">
        <h4 class="text-center">Accounts Receivable</h4>
    </div>
</div>

<div class="container">
    <!-- Company Name Filter Dropdown -->
    <div class="row mb-3">
        <div class="col-12">
            <RadzenDropDown TValue="string" @bind-Value="selectedCompanyName" Data="companyNames" Placeholder="Select Company"
                            Change="OnCompanyNameChanged" />
        </div>
    </div>

    @if (filteredInvoices != null && filteredInvoices.Any())
    {
        <div class="row">
            <div class="col-12">
                <RadzenDataGrid TItem="Invoice" Data="@filteredInvoices" AllowPaging="true" PageSize="10" AllowSorting="true" AllowColumnReorder="true" ColumnWidth="140px" AllowColumnResize="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="Invoice" Title="Invoice Number" >
                            <Template Context="invoice">
                                @((invoice.Id + 10000).ToString())
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Invoice" Property="StartDate" Title="WorkDate" FormatString="{0:MM/dd/yyyy}" />
                        <RadzenDataGridColumn TItem="Invoice" Property="CompanyName" Title="Company Name" />
                        <RadzenDataGridColumn TItem="Invoice" Property="AmountCost" Title="Amount Cost" />

                        <!-- Checkbox Column -->
                        <RadzenDataGridColumn TItem="Invoice" Title="Select">
                            <Template Context="invoice">
                                <input type="checkbox" @onchange="e => OnCheckboxChanged(invoice, e.Value)" />
                            </Template>
                        </RadzenDataGridColumn>

                        <!-- Editable Columns -->
                        <RadzenDataGridColumn TItem="Invoice" Property="AmountPaid" Title="Amount Paid">
                            <Template Context="invoice">
                                @if (selectedInvoices.Contains(invoice))
                                {
                                    <RadzenNumeric @bind-Value="invoice.AmountPaid" />
                                }
                                else
                                {
                                    @invoice.AmountPaid
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Invoice" Property="DatePaid" Title="Date Paid">
                            <Template Context="invoice">
                                @if (selectedInvoices.Contains(invoice))
                                {
                                    <RadzenDatePicker @bind-Value="invoice.DatePaid" />
                                }
                                else
                                {
                                    @invoice.DatePaid.ToString("MM/dd/yyyy")
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Invoice" Property="CheckNumber" Title="Check Number">
                            <Template Context="invoice">
                                @if (selectedInvoices.Contains(invoice))
                                {
                                    <RadzenTextBox @bind-Value="invoice.CheckNumber" />
                                }
                                else
                                {
                                    @invoice.CheckNumber
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Invoice" Property="SpecialNote" Title="Special Note" />
                        <RadzenDataGridColumn TItem="Invoice" Property="PropertyAddress" Title="Property Address" />
                        <RadzenDataGridColumn TItem="Invoice" Property="Unit" Title="Unit" />
                        <RadzenDataGridColumn TItem="Invoice" Property="GateCode" Title="Gate Code" />
                        <RadzenDataGridColumn TItem="Invoice" Property="LockBox" Title="Lock Box" />
                        <RadzenDataGridColumn TItem="Invoice" Property="SizeBedroom" Title="Bedrooms" />
                        <RadzenDataGridColumn TItem="Invoice" Property="SizeBathroom" Title="Bathrooms" />
                        <RadzenDataGridColumn TItem="Invoice" Property="WorkOrder" Title="Work Order" />
                        <RadzenDataGridColumn TItem="Invoice" Property="JobDescriptionChoice" Title="Job Description" />
                        <RadzenDataGridColumn TItem="Invoice" Property="ContractorName" Title="Contractor Name" />

                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    }

    <div class="d-flex my-3">
        <button class="btn btn-primary me-5" @onclick="Done">Done</button>
        <button class="btn btn-secondary me-2" @onclick="DownloadPDF">Download to PDF</button>
        <button class="btn btn-success me-2" @onclick="DownloadExcel">Download to Excel</button>
    </div>
</div>

@code {
    private RadzenDataGrid<Invoice> invoiceGrid;
    private List<Invoice> selectedInvoices = new List<Invoice>();
    private List<Invoice> invoices = new List<Invoice>();
    private List<Invoice> filteredInvoices = new List<Invoice>();

    private string selectedCompanyName = "View All";
    private List<string> companyNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            invoices = await InvoiceService.GetInvoicesReceivable();

            // Extract unique company names from invoices and add "View All"
            companyNames = invoices.Select(i => i.CompanyName).Distinct().ToList();
            companyNames.Insert(0, "View All");

            // Initialize filtered invoices to show all by default
            filteredInvoices = invoices;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            // Handle the exception as needed
        }
    }

    private void OnCompanyNameChanged(object value)
    {
        selectedCompanyName = value.ToString();

        // Filter invoices based on selected company name
        if (selectedCompanyName == "View All")
        {
            filteredInvoices = invoices;
        }
        else
        {
            filteredInvoices = invoices.Where(i => i.CompanyName == selectedCompanyName).ToList();
        }
    }

    private void OnCheckboxChanged(Invoice invoice, object isChecked)
    {
        bool checkedStatus = (bool)isChecked;
        if (checkedStatus)
        {
            if (!selectedInvoices.Contains(invoice))
            {
                selectedInvoices.Add(invoice);
            }
        }
        else
        {
            selectedInvoices.Remove(invoice);
        }
    }

    private async Task Done()
    {
        try
        {
            for (int i = 0; i < selectedInvoices.Count; i++){
                if (selectedInvoices[i].AmountCost < selectedInvoices[i].AmountPaid)
                {
                    NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "The paid amount can not be greater than amount due!",
                            Duration = 3000
                        });
                    return;
                }
                selectedInvoices[i].Status = 2;
            }
            var result = await DialogService.Confirm("Are you sure you want to Submit?", "Confirmation");

            if (result.HasValue && result.Value)
            {
                await InvoiceService.UpdateInvoicesAsync(selectedInvoices);

                // Remove processed invoices from the list
                invoices = invoices.Except(selectedInvoices).ToList();
                filteredInvoices = filteredInvoices.Except(selectedInvoices).ToList();

                // Clear the selection
                selectedInvoices.Clear();
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Invoices successfully submitted!",
                    Duration = 3000
                });
                

            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to updating invoice: {ex.Message}",
                Duration = 3000
            });
        }
    }
    private async Task DownloadExcel()
    {
        // Filter only necessary data from the invoices
        var invoiceData = filteredInvoices.Select(i => new
        {
            i.Id,
            i.TodaysDate,
            i.StartDate,
            i.AnticipatedEndDate,
            i.CompanyName,
            i.AmountCost,
            i.AmountPaid,
            i.CheckNumber,
            i.SpecialNote,
            i.PropertyAddress,
            i.Unit,
            i.GateCode,
            i.LockBox,
            i.SizeBedroom,
            i.SizeBathroom,
            i.WorkOrder,
            i.JobDescriptionChoice
        }).ToList();

        // Call JS function to download Excel
        await JS.InvokeVoidAsync("saveAsExcel", invoiceData);
    }

    private async Task DownloadPDF()
    {
        // Filter only necessary data from the invoices
        var invoiceData = filteredInvoices.Select(i => new
        {
            i.Id,
            i.TodaysDate,
            i.StartDate,
            i.AnticipatedEndDate,
            i.CompanyName,
            i.AmountCost,
            i.AmountPaid,
            i.CheckNumber,
            i.SpecialNote,
            i.PropertyAddress,
            i.Unit,
            i.GateCode,
            i.LockBox,
            i.SizeBedroom,
            i.SizeBathroom,
            i.WorkOrder,
            i.JobDescriptionChoice
        }).ToList();

        // Call JS function to download PDF
        await JS.InvokeVoidAsync("saveAsPDF", invoiceData);
    }
}
