@page "/createinvoice-confirm-dialog"
@inject DialogService DialogService
@inject InvoiceService InvoiceService
@inject NotificationService NotificationService

<RadzenCard>
    <RadzenRow>
        <RadzenColumn>
            <strong>Today's Date:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenDatePicker @bind-Value="invoice.TodaysDate" DateFormat="MM/dd/yyyy" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Job Start Date:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenDatePicker @bind-Value="invoice.StartDate" DateFormat="MM/dd/yyyy" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Expected Completion Date:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenDatePicker @bind-Value="invoice.AnticipatedEndDate" DateFormat="MM/dd/yyyy" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Company Name:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.CompanyName" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Property Address:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.PropertyAddress" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Unit:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.Unit" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Gate Code:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.GateCode" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Lock Box:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.LockBox" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Size:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenNumeric @bind-Value="invoice.SizeBedroom" Min="0" Max="10" />
            <strong>Bedrooms</strong>,
            <RadzenNumeric @bind-Value="invoice.SizeBathroom" Min="0" Max="10" />
            <strong>Bathrooms</strong>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Work Order:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.WorkOrder" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Job Description:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.JobDescriptionChoice" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>Contractor:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenTextBox @bind-Value="invoice.ContractorName" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn>
            <strong>AmountCost:</strong>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenNumeric @bind-Value="invoice.AmountCost" Min="0" Max="100000" Step="1" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="mt-4">
        <RadzenButton Text="Back" ButtonStyle="ButtonStyle.Secondary" Click="@CloseDialog" />
        <RadzenButton Text="Submit" ButtonStyle="ButtonStyle.Primary" Click="@OnSubmit" />
    </RadzenRow>
</RadzenCard>

@code {

    [Parameter] public Invoice invoice { get; set; }

    void CloseDialog()
    {
        DialogService.Close(false); // Close without returning success
    }

    private async Task OnSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(invoice.CompanyName) || string.IsNullOrEmpty(invoice.PropertyAddress) || string.IsNullOrEmpty(invoice.ContractorName))
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Please fill in all required fields.",
                        Duration = 3000
                    });
                return;
            }

            invoice.Status = 1;

            await InvoiceService.UpdateInvoiceAsync(invoice.Id, invoice);
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Invoice successfully submitted!",
                    Duration = 3000
                });
            DialogService.Close(true); // Return success
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Failed to add invoice: {ex.Message}",
                    Duration = 3000
                });
        }
    }
}
