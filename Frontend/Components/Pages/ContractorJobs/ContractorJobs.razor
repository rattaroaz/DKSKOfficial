@page "/contractorjobs"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject InvoiceService InvoiceService
@inject ContractorService ContractorService
@inject IJSRuntime JS

<h3 class="text-center my-4">Contractor Jobs</h3>
<RadzenCard>

    <RadzenRow>
        <RadzenColumn  class="mb-3">
            <RadzenLabel Text="Date to Search" />
            <RadzenDatePicker @bind-Value="selectedDate" DateFormat="MM/dd/yyyy" Change="OnDateChanged"  />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="mt-4">
        <RadzenColumn >
            <!-- Responsive Grid Wrapper -->
            <RadzenDataGrid Data="@filteredInvoices" TItem="Invoice" AllowPaging="true" PageSize="10" AllowSorting="true"  AllowColumnResize="true">
                <Columns>
                    <RadzenDataGridColumn TItem="Invoice" Property="StartDate" Title="Work Date" FormatString="{0:MM/dd/yyyy}" />
                    <RadzenDataGridColumn TItem="Invoice" Title="Invoice Number">
                        <Template Context="invoice">
                            @((invoice.Id + 10000).ToString())
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Invoice" Property="ContractorName" Title="Contractor" />
                    <RadzenDataGridColumn TItem="Invoice" Property="PropertyAddress" Title="Property" />
                    <RadzenDataGridColumn TItem="Invoice" Property="Unit" Title="Unit" />
                    <RadzenDataGridColumn TItem="Invoice" Property="GateCode" Title="Gate Code" />
                    <RadzenDataGridColumn TItem="Invoice" Property="LockBox" Title="LockBox Code" />
                    <RadzenDataGridColumn TItem="Invoice" Property="JobDescriptionChoice" Title="Job Description" />
                    <RadzenDataGridColumn TItem="Invoice" Property="WorkOrder" Title="Work Order" />
                    <RadzenDataGridColumn TItem="Invoice" Property="AmountCost" Title="Price" />
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow class="mt-3">
        <RadzenColumn  class="mb-3">
            <RadzenButton Text="Download to PDF" Click="DownloadPDF"  Icon="description" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" />
        </RadzenColumn>
        <RadzenColumn class="mb-3">
            <RadzenButton Text="Download to Excel" Click="DownloadExcel" Icon="table_view" Style="width: 100%;" ButtonStyle="ButtonStyle.Success" />
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

@code {
    DateTime selectedDate;

    private List<Invoice> invoices = new List<Invoice>();
    private List<Invoice> filteredInvoices = new List<Invoice>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            invoices = await InvoiceService.GetInvoicesSales();
            ApplyFilters();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void OnDateChanged()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredInvoices = invoices.Where(i => i.StartDate.Date == selectedDate.Date).ToList();
    }
    private async Task DownloadExcel()
    {
        // Filter only necessary data from the invoices
        var invoiceData = filteredInvoices.Select(i => new
        {
            i.Id,
            i.TodaysDate,
            i.StartDate,
            i.AnticipatedEndDate,
            i.CompanyName,
            i.AmountCost,
            i.AmountPaid,
            i.CheckNumber,
            i.SpecialNote,
            i.PropertyAddress,
            i.Unit,
            i.GateCode,
            i.LockBox,
            i.SizeBedroom,
            i.SizeBathroom,
            i.WorkOrder,
            i.JobDescriptionChoice
        }).ToList();

        // Call JS function to download Excel
        await JS.InvokeVoidAsync("saveAsExcel", invoiceData);
    }

    private async Task DownloadPDF()
    {
        // Filter only necessary data from the invoices
        var invoiceData = filteredInvoices.Select(i => new
        {
            i.Id,
            i.TodaysDate,
            i.StartDate,
            i.AnticipatedEndDate,
            i.CompanyName,
            i.AmountCost,
            i.AmountPaid,
            i.CheckNumber,
            i.SpecialNote,
            i.PropertyAddress,
            i.Unit,
            i.GateCode,
            i.LockBox,
            i.SizeBedroom,
            i.SizeBathroom,
            i.WorkOrder,
            i.JobDescriptionChoice
        }).ToList();

        // Call JS function to download PDF
        await JS.InvokeVoidAsync("saveAsPDF", invoiceData);
    }

}
