@page "/activejobs"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Radzen
@using Newtonsoft.Json;

@inject InvoiceService InvoiceService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject JobDescriptionService JobDescriptionService
@inject CompanyService CompanyService
@inject MyCompanyInfoService MyCompanyInfoService
@inject IJSRuntime JS

<h3 class="text-center my-4"><RadzenIcon Icon="work" />Active Jobs</h3>


<div class="container">
    <!-- Start and End Date Inputs -->
    <div class="row mb-3">
        <div class="col-12 col-md-4">
            Start Date:
            <RadzenDatePicker @bind-Value="startDate" DateFormat="MM/dd/yyyy" Change="OnStartDateChanged" />
        </div>
        <div class="col-12 col-md-4">
            End Date:
            <RadzenDatePicker @bind-Value="endDate" DateFormat="MM/dd/yyyy" Change="OnEndDateChanged" />
        </div>
        <div class="col-12 col-md-4">
            Company:
            <RadzenDropDown TValue="string" @bind-Value="selectedCompanyName" Data="companyNames" Placeholder="Select Company"
                            Change="OnCompanyNameChanged" />
        </div>
    </div>


    @if (filteredInvoices != null && filteredInvoices.Any())
    {
        <div class="row">
            <div class="col-12">
                <RadzenDataGrid TItem="Invoice" Data="@filteredInvoices" AllowPaging="true" PageSize="10" AllowSorting="true" AllowColumnReorder="true" ColumnWidth="140px" AllowColumnResize="true" ColumnReordered="@OnColumnReordered" @ref="InvoicesGrid">
                    <Columns>

                        <!-- Checkbox Column -->
                        <RadzenDataGridColumn TItem="Invoice" Title="Select">
                            <Template Context="invoice">
                                <input type="checkbox" @onchange="e => OnCheckboxChanged(invoice, e.Value)" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Invoice" Property="TodaysDate" Title="Today's Date" FormatString="{0:MM/dd/yyyy}" />
                        <RadzenDataGridColumn TItem="Invoice" Property="WorkDate" Title="Work Date" FormatString="{0:MM/dd/yyyy}" />
                        <RadzenDataGridColumn TItem="Invoice" Property="CompanyName" Title="Company Name" />
                        <RadzenDataGridColumn TItem="Invoice" Property="PropertyAddress" Title="Property Address" />
                        <RadzenDataGridColumn TItem="Invoice" Property="Unit" Title="Unit" />
                        <RadzenDataGridColumn TItem="Invoice" Property="GateCode" Title="Gate Code" />
                        <RadzenDataGridColumn TItem="Invoice" Property="LockBox" Title="Lock Box" />
                        <RadzenDataGridColumn TItem="Invoice" Property="GarageRemoteCode" Title="Garage Remote Code" />
                        <RadzenDataGridColumn TItem="Invoice" Property="SizeBedroom" Title="Bedrooms" />
                        <RadzenDataGridColumn TItem="Invoice" Property="SizeBathroom" Title="Bathrooms" />
                        <RadzenDataGridColumn TItem="Invoice" Property="WorkOrder" Title="Work Order" />
                        <RadzenDataGridColumn TItem="Invoice" Property="SpecialNote" Title="Special Note" />
                        <RadzenDataGridColumn TItem="Invoice" Property="JobDescriptionChoice" Title="Job Description" />

                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    }
    <RadzenRow class="mt-3">
        <RadzenColumn class="mb-3">
            <RadzenButton Text="Download to PDF" Click="DownloadPDF" Icon="description" Style="width: 100%;" ButtonStyle="ButtonStyle.Info" />
        </RadzenColumn>
        <RadzenColumn class="mb-3">
            <RadzenButton Text="Download to Excel" Click="DownloadExcel" Icon="table_view" Style="width: 100%;" ButtonStyle="ButtonStyle.Success" />
        </RadzenColumn>
    </RadzenRow>
</div>

@foreach (Invoice invoice in selectedInvoices)
{
    <div id="pdf-content-@invoice.Id" style="display: none;">
        <h3 class="text-center my-4">Active Job</h3>

        <div class="container my-5">
            <!-- Header Section -->
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Company: @myCompanyInfo.Name</strong></p>
                    <p>Address: @myCompanyInfo.Address</p>
                    <p>Phone: @myCompanyInfo.Phone</p>
                    <p>E-mail: @myCompanyInfo.Email</p>
                    <p>License Number:: @myCompanyInfo.LicenseNumber</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p><strong>Work Date:</strong> @(invoice.WorkDate.ToString("MM/dd/yyyy"))</p>
                    <p><strong>Gate Code:</strong> @(invoice.GateCode)</p>
                    <p><strong>Lock Box:</strong> @(invoice.LockBox)</p>
                    <p><strong>Garage Remote Code:</strong> @(invoice.GarageRemoteCode)</p>
                    <p><strong>Note:</strong> @(invoice.SpecialNote)</p>

                </div>
            </div>

            <!-- Bill To and Work To Section -->
            <div class="row mt-4">
                <div class="col-md-6">
                    <h5><strong>Bill To:</strong></h5>
                    <p>Company Name: @invoice.CompanyName</p>
                    <p>Address: @CompanyService.GetCompanyInfo(invoice, compannies).Address</p>
                    <p>Phone: @CompanyService.GetCompanyInfo(invoice, compannies).Phone</p>
                    <p>E-mail: @CompanyService.GetCompanyInfo(invoice, compannies).Email</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <h5><strong>Work To:</strong></h5>
                    <p>Supervisor Name: @CompanyService.GetSupervisorInfo(invoice, compannies).Name</p>
                    <p>Property: @CompanyService.GetPropertyInfo(invoice, compannies).Name</p>
                    <p>Address: @CompanyService.GetPropertyInfo(invoice, compannies).Address</p>
                    <p>City, Zip: @CompanyService.GetPropertyInfo(invoice, compannies).City, @CompanyService.GetPropertyInfo(invoice, compannies).Zip</p>
                    }
                </div>
            </div>

            <!-- Description Table -->
            <div class="row mt-4">
                <div class="col-12">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">Description</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (JobDiscription jd in GetJDList(invoice))
                            {
                                <tr>
                                    <td>@jd.description</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
}
@code {
    private DateTime? startDate;
    private DateTime? endDate;



    private RadzenDataGrid<Invoice> invoiceGrid;
    private List<Invoice> selectedInvoices = new List<Invoice>();
    private List<Invoice> invoices = new List<Invoice>();
    private List<Invoice> filteredInvoices = new List<Invoice>();

    private string selectedCompanyName = "View All";
    private List<string> companyNames = new List<string>();

    private MyCompanyInfo myCompanyInfo = new MyCompanyInfo() { };
    private void OnCheckboxChanged(Invoice invoice, object isChecked)
    {
        bool checkedStatus = (bool)isChecked;
        if (checkedStatus)
        {
            if (!selectedInvoices.Contains(invoice))
            {
                selectedInvoices.Add(invoice);
            }
        }
        else
        {
            selectedInvoices.Remove(invoice);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            invoices = await InvoiceService.GetInvoicesActive();
            myCompanyInfo = await MyCompanyInfoService.GetInfoAsync();
            await LoadComapnyDataAsync();
            await LoadJobDataAsync();
            // Extract unique company names from invoices and add "View All"
            companyNames = invoices.Select(i => i.CompanyName).Distinct().ToList();
            companyNames.Insert(0, "View All");

            // Initialize filtered invoices to show all by default
            filteredInvoices = invoices;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            // Handle the exception as needed
        }
    }

    private void OnCompanyNameChanged(object value)
    {
        selectedCompanyName = value.ToString();
        ApplyFilters();
    }
    private void OnStartDateChanged(DateTime? value)
    {
        OnDateChanged();
    }

    private void OnEndDateChanged(DateTime? value)
    {
        OnDateChanged();
    }

    private void OnDateChanged()
    {
        ApplyFilters();
    }
    private void ApplyFilters()
    {
        // Start by showing all invoices
        filteredInvoices = invoices;

        // Apply company name filter
        if (selectedCompanyName != "View All")
        {
            filteredInvoices = filteredInvoices.Where(i => i.CompanyName == selectedCompanyName).ToList();
        }

        // Apply date range filter if both start and end dates are set
        if (startDate.HasValue && endDate.HasValue)
        {
            filteredInvoices = filteredInvoices.Where(i => i.WorkDate >= startDate && i.WorkDate <= endDate).ToList();
        }
    }

    List<string> columnOrder = new List<string>();
    private RadzenDataGrid<Invoice> InvoicesGrid;

    private void OnColumnReordered(Radzen.DataGridColumnReorderedEventArgs<Invoice> args)
    {
        var currentColumnOrder = InvoicesGrid.ColumnsCollection.Select(c => c.Title).ToList();
        SaveColumnOrderToLocalStorage(currentColumnOrder);
    }


    private async void SaveColumnOrderToLocalStorage(List<string> columnOrder)
    {
        var columnOrderString = string.Join(",", columnOrder);
        await JS.InvokeVoidAsync("localStorage.setItem", "ActivJobscolumnOrder", columnOrderString);
    }

    private void ReorderColumns(List<string> columnOrder)
    {
        if (InvoicesGrid == null)
        {
            Console.WriteLine("filteredInvoicesGrid is not initialized.");
            return;
        }

        // Reorder the columns based on saved columnOrder
        var reorderedColumns = InvoicesGrid.ColumnsCollection
            .OrderBy(c => columnOrder.IndexOf(c.Title))
            .ToList();

        InvoicesGrid.ColumnsCollection.Clear();
        foreach (var column in reorderedColumns)
        {
            InvoicesGrid.ColumnsCollection.Add(column);
        }
        StateHasChanged();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // After the first render, attempt to reorder columns if there is a saved order
            var savedColumnOrder = await JS.InvokeAsync<string>("localStorage.getItem", "ActivJobscolumnOrder");
            if (!string.IsNullOrEmpty(savedColumnOrder))
            {
                var columnOrderList = savedColumnOrder.Split(',').ToList();
                if (InvoicesGrid != null)
                {
                    ReorderColumns(columnOrderList);
                }
            }
        }
    }
    private async Task DownloadExcel()
    {
        var invoiceData = selectedInvoices;

        await JS.InvokeVoidAsync("saveAsExcel", invoiceData);
    }



    private async Task DownloadPDF()
    {

        // Call JS function to download PDF
        foreach (Invoice invoice in selectedInvoices)
        {

            await JS.InvokeVoidAsync("saveAsPDFByTemplate", "pdf-content-" + invoice.Id, "documents");
        }
    }
    private List<JobDiscription> jobs = new List<JobDiscription>();

    private Companny company = new Companny { Name = "" };
    public List<Companny> compannies = new List<Companny>();
    private async Task LoadComapnyDataAsync()
    {
        compannies = await CompanyService.GetAllCompaniesAsync();
    }
    private async Task LoadJobDataAsync()
    {
        jobs = await JobDescriptionService.GetAllJobsAsync();

    }
    
    protected List<JobDiscription> GetJDList(Invoice invoice)
    {
        List<JobDiscription> jobDescriptions = new List<JobDiscription>();
        if (!string.IsNullOrEmpty(invoice.JobDescriptionChoice))
        {
            try
            {
                List<string> jobDescriptionsStrings = JsonConvert.DeserializeObject<List<string>>(invoice.JobDescriptionChoice);
                foreach (string jds in jobDescriptionsStrings)
                {
                    bool flag = true;
                    foreach (JobDiscription job in jobs)
                    {
                        if (job.description == jds)
                        {
                            jobDescriptions.Add(job);
                            flag = false;
                            break;
                        }
                    }
                    if (flag)
                    {
                        jobDescriptions.Add(new JobDiscription { description = jds, price = 0 });
                    }
                }
            }
            catch
            {
                // Handle JSON deserialization errors
            }
        }
        return jobDescriptions;
    }
}
