<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="DKSKOfficial.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="@InteractiveServer" />
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
</head>

<body>
    <Routes @rendermode="@InteractiveServer" />



    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <!-- SheetJS for Excel export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <!-- Include jsPDF UMD version -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <!-- jsPDF AutoTable plugin -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>


    <script>
        window.saveAsExcel = (data) => {
            const ws = XLSX.utils.json_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Invoices");
            XLSX.writeFile(wb, "Invoices.xlsx");
        }

        window.saveAsPDF = (data) => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const columns = Object.keys(data[0]);
            const rows = data.map(obj => Object.values(obj));

            // Define a default width for columns
            const defaultWidth = 40;

            // Create columnStyles object with default width for each column
            const columnStyles = {};
            columns.forEach((_, index) => {
                columnStyles[index] = { cellWidth: defaultWidth };
            });

            doc.text("Invoices", 10, 10);
            // Use autoTable to add table data with column width control
            doc.autoTable({
                head: [columns],
                body: rows,
                columnStyles: columnStyles
            });
            doc.save("Invoices.pdf");
        }
        window.saveAsPDFByTemplate = (templateID, filename, isLandscape = false) => {
            const { jsPDF } = window.jspdf;

            // Determine the orientation
            const orientation = isLandscape ? 'landscape' : 'portrait';

            // Create a new jsPDF instance with the chosen orientation
            const doc = new jsPDF({
                orientation: orientation,  // Set the orientation based on the isLandscape parameter
                unit: 'mm',                // Set the unit to mm
                format: 'a4'               // Set the page format to A4
            });

            // Create a new HTML template for each PDF
            const templateHtml = document.getElementById(templateID).innerHTML;

            // Replace placeholders with actual data if necessary
            const filledHtml = templateHtml;

            // Create a new element to hold the filled HTML
            const newElement = document.createElement('div');
            newElement.innerHTML = filledHtml;
            document.body.appendChild(newElement);

            // Use html2pdf to generate the PDF with the correct orientation
            html2pdf().from(newElement).set({
                jsPDF: { unit: 'mm', format: 'a4', orientation: orientation }
            }).toPdf().get('pdf').then(function (pdf) {
                // Adjust the page size based on orientation
                if (isLandscape) {
                    pdf.internal.pageSize.width = 297;  // Landscape width
                    pdf.internal.pageSize.height = 210; // Landscape height
                } else {
                    pdf.internal.pageSize.width = 210;  // Portrait width
                    pdf.internal.pageSize.height = 297; // Portrait height
                }
                pdf.save(filename + '.pdf'); // Save the file
            });

            // Remove the temporary element
            document.body.removeChild(newElement);
        };


        // Utility function to create an HTML element from a string
        function createHtmlElementFromString(htmlString) {
            const element = document.createElement('div');
            element.innerHTML = htmlString;
            return element;
        }
        function fillTemplate(templateHtml, data) {
            let filledHtml = templateHtml;

            // Use a regular expression to find all placeholders
            const placeholderPattern = /{{(\w+)}}/g;

            // Replace each placeholder with corresponding data
            filledHtml = filledHtml.replace(placeholderPattern, (match, key) => {
                // Return the value from data object or 'N/A' if key does not exist
                return data[key] !== undefined ? data[key] : 'N/A';
            });

            return filledHtml;
        }
        // Function to parse JWT token
        function parseJwt(token) {
            if (!token) return null;

            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            return JSON.parse(jsonPayload);
        }
    </script>
</body>

</html>
